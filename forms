在Django创建一个form

from django import forms

class NameForm(forms.Form):
	your_name = forms.CharField(label='Your name', max_length=100)


一个Form实例有一个is_valid()方法，用于验证字段。如果调用该方法时，所有的字段都包含有效数据，将返回True，且将表单的数据放在属性cleaned_data



配合视图使用

eg: views.py

from django.shortcuts import render
from django.http import HttpResponseRedirect
from .froms import NameForm


def get_name(request):
	if request.method = 'POST':
		form = NameForm(request.POST)
		if form.is_valid():
			return HttpResonseRedirect('/')
	else:
		form = NameForm()

	return render(request, 'name.html', {'form': form})



配合模板使用
name.py

<form action='/your-name'  mehod='post'>
	{% csrf_toekn %}
	{{ form }}
	<input type='submit' value='Submit'>
</form>



绑定与非绑定的表单实例
	区别
		未绑定的表单没有与之关联的数据，呈现给用户是，它将会为空或者默认值
		绑定的表单，可以判断提交的表单数据是否有效。如果无效，这会报错，并告知用户那些数据需要更改

	属性is_bound属性将告诉表单是否被绑定


关于filed实例
views.py

from django import forms


class ContactForm(forms.Form):
	subject = forms.CharField(max_length=100)
	message = forms.CharField(widget=forms.Textarea)
	sender = froms.Emailfield()
	cc_myself = forms.BooleadField(required=False)


widget
  每一个字段对对应一个Widget类，该类对应于html表单的weidit，例如<input type='text'>

  一般情况下，每个字段都有一个合理的默认widget，例如， CharField字段对应TextInput。可以根据需要更改，例如更为为<textarea>



在视图中如何处理数据，如下：

from django.core.mail import send_mail

if form.is_valid():
	subject = form.cleaned_data['subject']
	message = form.cleaned_data['message']
	sender = form.cleaned_data['sender']
	cc_myself = form.cleaned_data['cc_myself']

	recipients = ['info@example.com']
	if cc_myself:
		recipints.append(sender)

	send_main(subject, message, sender, recipients)
	return HttpRespnseRedirct('/thanks')




在模板中使用form